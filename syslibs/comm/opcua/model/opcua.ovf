#ifndef opcua_OVF_INCLUDED
#define opcua_OVF_INCLUDED

#include "opcua.ovt"
#include "open62541.h"
#include "libov/ov_macros.h"
#include "libov/ov_path.h"

/* mapping functions */
// BaseNode
typedef UA_StatusCode UA_FNC_OVBASENODETOOPCUA(void *handle, OV_INSTPTR_opcua_baseNode ovNode, UA_Node** opcuaNode);
typedef UA_StatusCode UA_FNC_OPCUABASENODETOOV(void *handle, UA_Node* opcuaNode, OV_INSTPTR_opcua_baseNode* ovNode, UA_NodeId *parrentNode);
// ObjectTypeNode
typedef UA_StatusCode UA_FNC_OVOBJECTTYPENODETOOPCUA(void *handle, OV_INSTPTR_opcua_objectTypeNode ovNode, UA_ObjectTypeNode** opcuaNode);
typedef UA_StatusCode UA_FNC_OPCUAOBJECTTYPENODETOOV(void *handle, UA_ObjectTypeNode* opcuaNode, OV_INSTPTR_opcua_objectTypeNode* ovNode, UA_NodeId *parrentNode);
// ObjectNode	
typedef UA_StatusCode UA_FNC_OVOBJECTNODETOOPCUA(void *handle, OV_INSTPTR_opcua_objectNode ovNode, UA_ObjectNode** opcuaNode);
typedef UA_StatusCode UA_FNC_OPCUAOBJECTNODETOOV(void *handle, UA_ObjectNode* opcuaNode, OV_INSTPTR_opcua_objectNode* ovNode, UA_NodeId *parrentNode);
// VariableNode    
typedef UA_StatusCode UA_FNC_OVVARIABLENODETOOPCUA(void *handle, OV_INSTPTR_opcua_variableNode ovNode, UA_VariableNode** opcuaNode);    
typedef UA_StatusCode UA_FNC_OPCUAVARIABLENODETOOV(void *handle, UA_VariableNode* opcuaNode, OV_INSTPTR_opcua_variableNode* ovNode, UA_NodeId *parrentNode);
// VariableTypeNode
typedef UA_StatusCode UA_FNC_OVVARIABLETYPENODETOOPCUA(void *handle, OV_INSTPTR_opcua_variableTypeNode ovNode, UA_VariableTypeNode** opcuaNode);
typedef UA_StatusCode UA_FNC_OPCUAVARIABLETYPENODETOOV(void *handle, UA_VariableTypeNode* opcuaNode, OV_INSTPTR_opcua_variableTypeNode* ovNode, UA_NodeId *parrentNode);
// ReferenceTypeNode
typedef UA_StatusCode UA_FNC_OVREFERENCETYPENODETOOPCUA(void *handle, OV_INSTPTR_opcua_referenceTypeNode ovNode, UA_ReferenceTypeNode** opcuaNode);    
typedef UA_StatusCode UA_FNC_OPCUAREFERENCETYPENODETOOV(void *handle, UA_ReferenceTypeNode* opcuaNode, OV_INSTPTR_opcua_referenceTypeNode* ovNode, UA_NodeId *parrentNode);
// DataTypeNode
typedef UA_StatusCode UA_FNC_OVDATATYPENODETOOPCUA(void *handle, OV_INSTPTR_opcua_dataTypeNode ovNode, UA_DataTypeNode** opcuaNode);  
typedef UA_StatusCode UA_FNC_OPCUADATATYPENODETOOV(void *handle, UA_DataTypeNode* opcuaNode, OV_INSTPTR_opcua_dataTypeNode* ovNode, UA_NodeId *parrentNode);
// ViewNode
typedef UA_StatusCode UA_FNC_OVVIEWNODETOOPCUA(void *handle, OV_INSTPTR_opcua_viewNode ovNode, UA_ViewNode** opcuaNode); 	
typedef UA_StatusCode UA_FNC_OPCUAVIEWNODETOOV(void *handle, UA_ViewNode* opcuaNode, OV_INSTPTR_opcua_viewNode* ovNode, UA_NodeId *parrentNode);
// MethodNode
typedef UA_StatusCode UA_FNC_OVMETHODNODETOOPCUA(void *handle, OV_INSTPTR_opcua_methodNode ovNode, UA_MethodNode** opcuaNode);    
typedef UA_StatusCode UA_FNC_OPCUAMETHODNODETOOV(void *handle, UA_MethodNode* opcuaNode, OV_INSTPTR_opcua_methodNode* ovNode, UA_NodeId *parrentNode);


/* nodestore interfacing functions */
typedef void UA_FNC_DELETENODE(UA_Node* node);
typedef UA_Node* UA_FNC_NEWNODE(UA_NodeClass nodeClass);
typedef UA_StatusCode UA_FNC_INSERTNODE(void* handle, UA_Node* node, UA_NodeId *parrentNode);
typedef UA_Node * UA_FNC_GETNODE(void* handle, UA_NodeId* nodeId);
typedef UA_StatusCode UA_FNC_REPLACENODE(void* handle, UA_Node* node);
typedef UA_StatusCode UA_FNC_REMOVENODE(void* handle, UA_NodeId* nodeId);
typedef UA_NodestoreInterface* UA_FNC_OVNODESTOREINTERFACENEW(void);
typedef void UA_FNC_OVNODESTOREINTERFACEDELETE(UA_NodestoreInterface * nodestoreInterface);
typedef void UA_FNC_OVNODESTOREINTERFACE2NEW(UA_NodestoreInterface*);
typedef void UA_FNC_OVNODESTOREINTERFACE2DELETE(UA_NodestoreInterface * nodestoreInterface);
	
/* opcua-Server functions */
typedef UA_StatusCode UA_FNC_ADDINFORMATIONMODEL(UA_NodestoreInterface *nsi, OV_STRING NameSpaceUri, OV_STRING StartFolder, opcua_loadInformationModel loadInfoModel, OV_UINT *NameSpaceIndexInformationModel, OV_UINT *NameSpaceIndexNodeStoreInterface, const UA_DataType *customDataTypes, OV_UINT customDataTypesSize);
/* opcua Client functions */
typedef UA_StatusCode UA_FNC_CONNECTTO(OV_INSTPTR_opcua_uaClient client);
typedef UA_StatusCode UA_FNC_READVALUE(OV_INSTPTR_opcua_uaClient client, UA_NodeId nodeId, UA_Variant *value);
typedef UA_StatusCode UA_FNC_DISCONNECT(OV_INSTPTR_opcua_uaClient client);
typedef	UA_StatusCode UA_FNC_BROWSE(OV_INSTPTR_opcua_uaClient client, UA_NodeId start, UA_BrowseDirection browseDirection,
                                                    UA_NodeId referenceTypeIdBrowse, UA_Boolean includeSubtypes, UA_UInt32 nodeClassMask,
                                                    UA_UInt32 resultMask, UA_NodeId *referenceTypeId, UA_Boolean *isForward,
                                                    UA_ExpandedNodeId *nodeId, UA_QualifiedName *browseName, UA_LocalizedText *displayName,
                                                    UA_NodeClass *nodeClass, UA_ExpandedNodeId *typeDefinition, OV_UINT *arrayNumber);
	
typedef UA_Int32 UA_FNC_ADDREFERENCES(
	void *ensHandle,
	const UA_RequestHeader *requestHeader,
	UA_AddReferencesItem* referencesToAdd,
	UA_UInt32 *indices,
	UA_UInt32 indicesSize,
	UA_StatusCode *addReferencesResults,
	UA_DiagnosticInfo *diagnosticInfos
);

typedef UA_Int32 UA_FNC_ADDONEWAYREFERENCE(
	void *ensHandle,
	const UA_AddReferencesItem *item
);

typedef UA_Int32 UA_FNC_DELETENODES(
	void *ensHandle,
	const UA_RequestHeader *requestHeader,
	UA_DeleteNodesItem *nodesToDelete,
	UA_UInt32 *indices,
	UA_UInt32 indicesSize,
	UA_StatusCode *deleteNodesResults,
	UA_DiagnosticInfo *diagnosticInfos
);

typedef UA_Int32 UA_FNC_DELETEREFERENCES(
	void *ensHandle,
	const UA_RequestHeader *requestHeader,
	UA_DeleteReferencesItem *referenceToDelete,
	UA_UInt32 *indices,
	UA_UInt32 indicesSize,
	UA_StatusCode deleteReferencesresults,
	UA_DiagnosticInfo *diagnosticInfos
);

typedef UA_Int32 UA_FNC_READNODES(
	void *ensHandle,
	const UA_RequestHeader *requestHeader,
	UA_ReadValueId *readValueIds,
	UA_UInt32 *indices,
	UA_UInt32 indicesSize,
	UA_DataValue *readNodesResults,
	UA_Boolean timeStampToReturn,
	UA_DiagnosticInfo *diagnosticInfos
);

typedef UA_Int32 UA_FNC_WRITENODES(
	void *ensHandle,
	const UA_RequestHeader *requestHeader,
	UA_WriteValue *writeValues,
	UA_UInt32 *indices,
	UA_UInt32 indicesSize,
	UA_StatusCode *writeNodesResults,
	UA_DiagnosticInfo *diagnosticInfo
);

typedef UA_Int32 UA_FNC_BROWSENODES(
	void *ensHandle,
	const UA_RequestHeader *requestHeader,
	UA_BrowseDescription *browseDescriptions,
	UA_UInt32 *indices,
	UA_UInt32 indicesSize,
	UA_UInt32 requestedMaxReferencesPerNode,
	UA_BrowseResult *browseResults,
	UA_DiagnosticInfo *diagnosticInfos
);

typedef UA_Int32 UA_FNC_TRANSLATEBROWSEPATHSTONODEIDS(
	void *ensHandle, 
	const UA_RequestHeader *requestHeader, 
	UA_BrowsePath *browsePath,
	UA_UInt32 *indices, 
	UA_UInt32 indicesSize, 
	UA_BrowsePathResult *browsePathResults, 
	UA_DiagnosticInfo *diagnosticInfos
);

typedef UA_Int32 UA_FNC_CALL(
	void *ensHandle,
	const UA_RequestHeader *requestHeader,
	UA_CallMethodRequest *request,
	UA_UInt32 *indices,
	UA_UInt32 indicesSize,
	UA_CallMethodResult *results
);

/*	Pack a list of OV_ANYs of length numberofArgs into a list of UA_Variants of same size. UA_Variants are alloced within the UA server	*/
typedef OV_RESULT UA_FNC_PACKARGS(
	OV_UINT	numberofArgs,
	const OV_ANY *argList,
	UA_Variant **packedArgList
);

/*	Unpack a list of UA_Variants of length numberofArgs into a list of OV_ANYs of same size. OV_ANYs are alloced in the memstack.	*/
typedef OV_RESULT UA_FNC_UNPACKARGS(
	OV_UINT numberofArgs,
	const UA_Variant *packedArgList,
	OV_ANY	*argList
);
	
typedef UA_StatusCode UA_FNC_GETCALLARGS(
	OV_INSTPTR_opcua_arguments pobj,
	OV_UINT	*numberofArgs,
	UA_Argument	**argList
);

typedef OV_RESULT UA_FNC_SETCALLARGS(
	OV_INSTPTR_opcua_arguments pobj,
	OV_UINT	numberofArgs,
	OV_STRING* names,
    OV_STRING* descriptions,
    OV_INT* types,
    OV_BOOL* isArray,
    OV_UINT* lengths	
);
		
typedef OV_RESULT  UA_FNC_PRECALLMETHOD(
	OV_INSTPTR_opcua_methodNode pobj
);

typedef OV_RESULT   UA_FNC_CALLEDMETHOD(
	OV_INSTPTR_opcua_methodNode pobj,
	size_t numberofInputArgs,
	const UA_Variant *packedInputArgList,
	size_t numberofOutputArgs,
	UA_Variant **packedOutputArgList
);

typedef void  UA_FNC_POSTCALLMETHOD(
	OV_INSTPTR_opcua_methodNode pobj,
	OV_BOOL methodFailed
);

typedef UA_StatusCode UA_FNC_STARTNL(
	struct UA_ServerNetworkLayer *nl, 
	UA_Logger *logger
);

typedef UA_Int32 UA_FNC_NLGETWORK(
	struct UA_ServerNetworkLayer *nl, 
	UA_Job** jobs, 
	UA_UInt16 timeout
);

typedef UA_Int32 UA_FNC_STOPNL(
	struct UA_ServerNetworkLayer *nl, 
	UA_Job** jobs
);

typedef void UA_FNC_DELETENL(
	struct UA_ServerNetworkLayer *nl
);

	
#endif

